
# Page. 25 ~

==== Identity Federation in AWS ====

Give users outside of AWS permissions to access AWS resources in your account

You don’t need to create IAM Users (user management is outside AWS)

Use cases:
    A corporate has its own identity system (e.g., Active Directory)
    Web/Mobile application that needs access to AWS resources

so how it work ? 
    basically ,
    1. we setup a trust relationship 
        between our AWS and the identity provider , which already exist
        to tell aws it's fine to use this provider's credentials

    2. User login to the identity provider , 
        get credentials from identity provider (such as SAML2.0 )
    
    3. User can user this credentials to assume AWS role
        then STS will given a tempory credentials to access aws resources


Identity Federation can have many flavors:
    SAML 2.0
    Custom Identity Broker
    Web Identity Federation With(out) Amazon Cognito
    Single Sign-On (SSO)




==== SAML 2.0 Federation ====

Security Assertion Markup Language 2.0 (SAML 2.0)

Open standard used by many identity providers (e.g., ADFS)
    Supports integration with Microsoft Active Directory Federations Services (ADFS)
    Or any SAML 2.0–compatible IdPs with AWS

Access to AWS Console, AWS CLI, or AWS API using temporary credentials
    No need to create IAM Users for each of your employees
    Need to setup a trust between AWS IAM and SAML 2.0 Identity Provider (both ways)

Under-the-hood: 
    Uses the STS API AssumeRoleWithSAML

SAML 2.0 Federation is the “old way”, 
    Amazon Single Sign-On (AWS SSO) Federation is the new managed and simpler way
    https://aws.amazon.com/blogs/security/enabling-federation-to-aws-using-windows-active-directory-adfs-and-saml-2-0/


how it work ?
    just like we mentioned above.

    1. user login Portal/Identity Provider (IdP)
    2. the IdP lookup in some LDAP-based Identity Store to Authenticate
    3. IdP give the user a <SAML Assertion>
    4. user use this <SAML Assertion> , call AssumeRoleWithSAML API in AWS
    5. AWS STS provide user a <Temporary Security Credentials> 
    6. finally user can access aws resource , using this <Temporary Security Credentials>

    # if we use this to access the aws console ,
      after (5.) , STS will provide a pre-signed URL using the Temporary credentials
      then user can access this URL , redirect to AWS Console



Active Directory FS (ADFS)
    ADFS - Active Directory Federation Services
    it work just the same way as the SAML2.0 
    the differences :
        IdP                         ->  ADFS
        LDAP-based Identity Store   ->  Active Directory



==== Custom Identity Broker Application ====

Use only if Identity Provider is NOT compatible with SAML 2.0

The Identity Broker 
    Authenticates users & requests temporary credentials from AWS
    and must determine the appropriate IAM Role

Uses the STS API <AssumeRole> or <GetFederationToken>
    
how it work ?
    1. user login Custom-Identity-Broker
    2. the Custom-Identity-Broker lookup in some LDAP-based Identity Store to Authenticate
    3. the Custom-Identity-Broker 
        will directly request STS for <Temporary Security Credentials> 
        * this is the differences 
    4. Custom-Identity-Broker give the <Temporary Security Credentials>  (or pre-signed URL ) to user
    5. User access AWS resource using the <Temporary Security Credentials> 

    # so because Custom-Identity-Broker will request <Temporary Security Credentials> directly ,
        that Custom-Identity-Broker  must determine the appropriate IAM Role



==== Web Identity Federation =====

* 3rd Party IdP such as     
    Google , Facebook , Amazon , OpenID Connect Compatible IdP

* Not recommended by AWS – use Cognito instead

how it work ?
    1. client Login into a 3rd Party IdP
    2. 3rd Party IdP provide a Web Identity Token to client
    3. client call <AssumeRoleWithWebIdentity> API 
        and sent the Web Identity Token to STS
    4. STS provide <Temporary Security Credentials> 
    5. client access AWS resources using <Temporary Security Credentials>




==== Web Identity Federation – With Cognito =====

# it works basically the same way as it without Cognito 
as below 

    1. client Login into a 3rd Party Identity Provider (IdP)
    2. 3rd Party IdP provide a <Web Identity Token> to client
  * 3. client and send the <Web Identity Token> to <Cognito>
  * 4. Cognito provide a <Cognito Token> to client
  * 5. client send the <Cognito Token> to STS
    6. STS provide <Temporary Security Credentials> 
    7. client access AWS resources using <Temporary Security Credentials>

    # differences is step (3.) (4.) (5.)

Preferred over for Web Identity Federation
    Create IAM Roles using Cognito with the least privilege needed
    Build trust between the OIDC IdP and AWS

# Preferred over for <without Cognito>
Cognito benefits:  
    Supports anonymous users
    Supports MFA
    Data Synchronization

Cognito replaces a Token Vending Machine (TVM)



==== Web Identity Federation – IAM Policy =====

After being authenticated with Web Identity Federation, 
you can identify the user with an IAM policy variable

Examples:
    cognito-identity.amazonaws.com:sub
    www.amazon.com:user_id
    graph.facebook.com:id
    accounts.google.com:sub


--------- policy example ---------
{
    "Version":"2012-10-17",
    "Statement":[
        {
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource":"arn:aws:s3:::myBucket",
            "Condition":{
                "StringLike":{
                    "s3:prefix":"Amazon/mynumbersgame/${www.amazon.comiuser_id}/*"
                }
            }
        },
        {
            "Effect":"Allow",
            "Action": [
                "s3:GetObject",
                "s3:Putobject",
                "s3:DeleteObject"
            ],
            "Resource":[
                "arn:aws:s3:::myBucket/amazon/mynumbersgame/${www.amazon.com:user_id}",
                "arn:aws:s3:::myBucket/amazon/mynumbersgame/${www.amazon.comuser_id}/*"
            ]
        }
    ]
}

