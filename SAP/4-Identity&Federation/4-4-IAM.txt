
# Page 8 ~


IAM – What should you know by now
• Users: long term credentials
• Groups
• Roles: short-term credentials, uses STS
    • EC2 Instance Roles: 
        uses the EC2 metadata service. One role at a time per instance
    • Service Roles: 
        API Gateway, CodeDeploy, etc…
    • Cross Account roles
• Policies
    • AWS Managed
    • Customer Managed
    • Inline Policies
• Resource Based Policies (S3 bucket, SQS queue, etc…) 

IAM Policies Deep Dive 
• Anatomy of a policy: 
    JSON doc with (below five part)
        Effect, 
        Action, 
        Resource, 
        Conditions, 
        Policy Variables
• Explicit DENY has precedence over ALLOW 
• Best practice: 
    use least privilege for maximum security 
    two tools for this
        • Access Advisor: 
            See permissions granted and when last accessed
        • Access Analyzer: 
            Analyze resources that are shared with external entity
• Navigate Examples at:
    https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_examples.html


IAM AWS Managed Policies
AdministratorAccess 
{
    "Version": "2012
-10
-17",
"Statement": [ {
"Effect": "Allow",
"Action": "*",
"Resource": "*"
}
]
}

PowerUserAccess
{
"Version": "2012-10-17",
"Statement": [
{
"Effect": "Allow",
"NotAction": [
"iam:*",
"organizations:*",
"account:*"
],
"Resource": "*"
},…
…{
"Effect": "Allow",
"Action": [
"iam:CreateServiceLinkedRole",
"iam:DeleteServiceLinkedRole",
"iam:ListRoles",
"organizations:DescribeOrganization”,
"account:ListRegions"
],
"Resource": "*"
}
]
}


IAM Policies Conditions

"Condition" : { "{condition-operator}" : { "{condition-key}" : "{condition-value}" }}
Operators:
• String (StringEquals, StringNotEquals, StringLike…)
• "Condition": {"StringEquals": {"aws:PrincipalTag/job-category": "iamuser-admin"}}
• "Condition": {"StringLike": {"s3:prefix": [ "", "home/", "home/${aws:username}/" ]}}
• Numeric (NumericEquals, NumericNotEquals, NumericLessThan…)
• Date (DateEquals, DateNotEquals, DateLessThan…)
• Boolean (Bool):
• “Condition": {"Bool": {"aws:SecureTransport": "true"}}
• "Condition": {"Bool": {"aws:MultiFactorAuthPresent": "true"}}
• (Not)IpAddress:
• "Condition": {"IpAddress": {"aws:SourceIp": "203.0.113.0/24"}}
• ArnEquals, ArnLike
• Null: "Condition":{"Null":{"aws:TokenIssueTime":"true"}} 



IAM Policies Variables and Tags

Example: ${aws:username}
• "Resource": ["arn:aws:s3:::mybucket/${aws:username}/*"]
AWS Specific:
• aws:CurrentTime, aws:TokenIssueTime, aws:principaltype, aws:SecureTransport,
aws:SourceIp, aws:userid, ec2:SourceInstanceARN
Service Specific:
• s3:prefix, s3:max-keys, s3:x-amz-acl, sns:Endpoint, sns:Protocol…
Tag Based:
• iam:ResourceTag/key-name, aws:PrincipalTag/key-name…


IAM Roles vs Resource Based Policies

• Attach a policy to a resource (example: S3 bucket policy) versus
attaching of a using a role as a proxy




IAM Roles vs Resource Based Policies
• When you assume a role (user, application or service), you give up your
original permissions and take the permissions assigned to the role
• When using a resource-based policy, the principal doesn’t have to give up any permissions
• Example: User in account A needs to scan a DynamoDB table in Account A and dump it in an S3 bucket in Account B.
• Supported by: Amazon S3 buckets, SNS topics, SQS queues, Lambda
functions, ECR, Backup, EFS, Glacier, Cloud9, AWS Artifact, Secrets Manager,
ACM, KMS, CloudWatch Logs, API Gateway, EventBridge etc… 



IAM Permission Boundaries
• IAM Permission Boundaries are supported for users and roles (not groups)
• Advanced feature to use a managed policy to set the maximum permissions
an IAM entity can get.



IAM Permission Boundaries
• Can be used in combinations of
AWS Organizations SCP

Use cases
• Delegate responsibilities to non
administrators within their permission
boundaries, for example create new IAM
users
• Allow developers to self-assign policies and manage their own permissions, while
making sure they can’t “escalate” their
privileges (= make themselves admin)
• Useful to restrict one specific user
(instead of a whole account using
Organizations & SCP)



