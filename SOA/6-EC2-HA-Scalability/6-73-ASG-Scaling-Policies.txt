
-– Dynamic Scaling Policies --

Target Tracking Scaling
    Most simple and easy to set-up
    Example: 
        I want the average ASG CPU to stay at around 40%

Simple / Step Scaling
    for Example , When a CloudWatch alarm is triggered 
        (like CPU > 70%), then add 2 units
        (like CPU < 30%), then remove 1

Scheduled Actions
    Anticipate a scaling based on known usage patterns
    Example: 
        increase the min capacity to 10 at 5 pm on Fridays


-– Predictive Scaling ---

Predictive scaling: 
    continuously forecast load and schedule scaling ahead

it's like 
    Analyze historical load
    -> Generate forecast
    -> Schedule scaling actions
    
    -> back to the firt step ,
       keep improving the cost performance continuously

# kind of manchine learn thing


-- Good metrics to scale on --

CPUUtilization: 
    Average CPU utilization across your instances
RequestCountPerTarget: 
    to ensure the number of requests per EC2 instances is stable
Average Network In / Out 
    (if you’re application is network bound)
Any custom metric 
    (that you push using CloudWatch)


-- Scaling Cooldowns ---

After a scaling activity happens, 
you are in the cooldown period 
    (default 300 seconds)

During the cooldown period, 
the ASG will not launch or terminate additional instances 
    (to allow for metrics to stabilize)

Advice: 
Use a ready-to-use AMI to reduce configuration time 
in order to be serving request fasters 
and reduce the cooldown period